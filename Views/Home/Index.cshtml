@{
    ViewBag.Title = "Weather App";
}



<div class="col-md-6" id="div1">
    <label for="city" class="form-label">City:</label>
    <input type="text" class="form-control" id="city" placeholder="Enter a city" />
    <button id="saveDataButton" class="btn btn-primary mt-3" style="display:none;">Save to Database</button>
    <ul id="suggestions" class="list-group mt-2"></ul>
</div>

<canvas id="weatherChart" width="400" height="200" style="display:none;"></canvas>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const input = document.getElementById('city');
    const suggestionsList = document.getElementById('suggestions');
    const weatherChart = document.getElementById('weatherChart');
    const saveDataButton = document.getElementById('saveDataButton');  
    let chartInstance;
    let graphData = {}; 
    input.addEventListener('input', async () => {
        const city = input.value.trim();

        if (!city) {
            suggestionsList.innerHTML = '';
            weatherChart.style.display = 'none';
            saveDataButton.style.display = 'none';
            return;
        }

        try {
            const response = await fetch("https://nominatim.openstreetmap.org/search?q=" + encodeURIComponent(city) + "&format=jsonv2");
            if (response.ok) {
                const data = await response.json();

                suggestionsList.innerHTML = '';

                data.forEach(item => {
                    const li = document.createElement('li');
                    li.textContent = item.display_name;
                    li.classList.add('list-group-item');
                    li.style.cursor = 'pointer';

                    li.addEventListener('click', async () => {
                        suggestionsList.innerHTML = '';
                        input.value = item.display_name; 
                        weatherChart.style.display = 'block';
                        saveDataButton.style.display = 'inline';

                        const latitude = item.lat;
                        const longitude = item.lon;

                        const weatherResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m`);
                        if (weatherResponse.ok) {
                            const weatherData = await weatherResponse.json();

                            const hourlyData = weatherData.hourly;
                            const labels = hourlyData.time.map(time => new Date(time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }));
                            const temperatures = hourlyData.temperature_2m;
                            const windSpeeds = hourlyData.wind_speed_10m;
                            const humidities = hourlyData.relative_humidity_2m;
                             
                            graphData = {
                                city: item.display_name,
                                temperature: temperatures,
                                windSpeed: windSpeeds,
                                humidity: humidities,
                                time:labels
                            };

                            if (chartInstance) {
                                chartInstance.destroy();
                            }
                            chartInstance = new Chart(weatherChart, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        {
                                            label: 'Temperature (°C)',
                                            data: temperatures,
                                            borderColor: 'rgba(75, 192, 192, 1)',
                                            borderWidth: 2,
                                            fill: false
                                        },
                                        {
                                            label: 'Wind Speed (m/s)',
                                            data: windSpeeds,
                                            borderColor: 'rgba(255, 99, 132, 1)',
                                            borderWidth: 2,
                                            fill: false
                                        },
                                        {
                                            label: 'Humidity (%)',
                                            data: humidities,
                                            borderColor: 'rgba(54, 162, 235, 1)',
                                            borderWidth: 2,
                                            fill: false
                                        }
                                    ]
                                },
                                options: {
                                    responsive: true,
                                    plugins: {
                                        legend: {
                                            display: true
                                        }
                                    },
                                    scales: {
                                        x: {
                                            title: {
                                                display: true,
                                                text: 'Time'
                                            }
                                        },
                                        y: {
                                            title: {
                                                display: true,
                                                text: 'Values'
                                            }
                                        }
                                    }
                                }
                            });
                        } else {
                            console.error('Failed to fetch weather data:', weatherResponse.statusText);   
                        }
                    });

                    suggestionsList.appendChild(li);
                });  
            } else {
                console.error('Failed to fetch data:', response.statusText);
            }
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    });

   

    saveDataButton.addEventListener('click', async () => { 
        try {
            
           
            console.log(graphData)
            $.ajax({
                url: '@Url.Action("Create", "Weathers")',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(graphData),
                success: function (response) {  
                    console.log("success", response);
                },
                error: function (xhr, status, error) {
                    console.error("Error:", xhr.responseText || error);
                } 
            });
 


        } catch (error) {
            console.error('Error saving data:', error);
        }
    });
</script>
